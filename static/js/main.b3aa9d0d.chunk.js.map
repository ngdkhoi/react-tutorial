{"version":3,"sources":["index.js"],"names":["Square","props","className","isWinning","onClick","value","calculateWinner","squares","lines","i","length","a","b","c","player","line","Board","this","winningSquares","includes","row","k","col","j","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","isAscending","slice","setState","concat","location","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","sortHistory","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3aa9d0d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={\"square \" + (props.isWinning ? \"square--winning\" : null)}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return { player: squares[a], line: [a, b, c] };\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                isWinning={this.props.winningSquares.includes(i)}\r\n                key={\"square \" + i}\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const row = [];\r\n        let k = 0; //key\r\n        for (let i = 0; i < 3; i++) {\r\n            const col = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                col.push(this.renderSquare(3 * i + j));\r\n                k++;\r\n            }\r\n            row.push(<div key={k} className=\"board-row\">{col}</div>);\r\n        }\r\n        return (\r\n            <div>\r\n                {row}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            isAscending: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const locations = [\r\n            [1, 1],\r\n            [2, 1],\r\n            [3, 1],\r\n            [1, 2],\r\n            [2, 2],\r\n            [3, 2],\r\n            [1, 3],\r\n            [2, 3],\r\n            [3, 3]\r\n        ];\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: locations[i]\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    sortHistory() {\r\n        this.setState({\r\n            isAscending: !this.state.isAscending\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n\r\n            const desc = move ?\r\n                'Go to move #' + move + ' (' + history[move].location + ')' :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>\r\n                        {move === this.state.stepNumber ? <b>{desc}</b> : desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        }\r\n        else if (!current.squares.includes(null)) {\r\n            status = \"Draw\";\r\n        }\r\n        else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n\r\n                    <Board\r\n                        winningSquares={winner ? winner.line : []}\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <button onClick={() => this.sortHistory()}>\r\n                        Sort by: {this.state.isAscending ? \"Ascending\" : \"Descending\"}\r\n                    </button>\r\n                    <div>{status}</div>\r\n                    <ol>{this.state.isAscending ? moves : moves.reverse()}</ol>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}